import numpy as np
import scipy.stats as stats

"""
1-4 задачи решать с помощью функций, 5ю вручную
Выбрать тест и проверить, есть  ли различия между выборками:
"""

"""
Задание-1:
Даны две независимые выборки. Не соблюдается условие нормальности
x1: 380, 420, 290
y1: 140, 360, 200, 900
Сделайте вывод по результатам, полученным с помощью функции
"""

# Пояснение:
# 1. Не соблюдается условие нормальности - для расчета используем непараметрические критерии
# 2. Выборки независимые, выборок 2-е - для расчета в соответствии с условиями воспользуемся
#     критерием Манна - Уитни
# Гипотеза-0 (𝐻_0): Нет статистически значимых различий между выборками
# Гипотеза-1 (𝐻_1): Статистически значимые различия имеются
# 𝐻_0: 𝜇_1= 𝜇_2
# 𝐻_1: 𝜇_1≠ 𝜇_2
# 𝜇_1 и  𝜇_2− медианы 1-й и 2-й выборок.
#
# Объединим данные выборок в один ряд и присвоим ранги:
# ---- X1 -----  ------ Y1 --------
# 380, 420, 290, 140, 360, 200, 900
#  5    6    3    1    4    2    7
# Ʃ = 5+6+3 = 14  Ʃ = 1+4+2+7 = 14
# Имеем в виду следующее:
# Если сумма рангов в меньшей выборке попадает в интервал между критическими значениями,
# причем сами критические значения не включаются в этот интервал, то верна нулевая гипотеза

# Для анализа возьмем значение α = 0,05 (по умолчанию)
# Собственно расчет выполним используя функцию mannwhitheyu() библиотеки stats:

hyp_0 = 'Нет статистически значимых различий'
hyp_1 = 'Статистически значимые различия имеются'
alfa = 0.05                                       # α = 0,05 (по умолчанию)
X1 = np.array([380, 420, 290])
X2 = np.array([140, 360, 200, 900])

st, p_value = stats.mannwhitneyu(X1, X2, alternative='two-sided')
h0_true = p_value > alfa
p_val = round(p_value, 3)
compr_txt = f'{p_val} > {alfa}' if h0_true else f'{p_val} <= {alfa}'

# вывод результатов проверки
print()
print('Задание-1.')
print('--------------------------------')
print(f'Между выборками: '
      f'\n- X1 = {X1} '
      f'\n- Y1 = {X2}')
print(f'statistic = {st}; p_value = {p_val}')
print(f'{hyp_0 if h0_true else hyp_1}:')
print(f'т.к. p_value {">" if h0_true else "<="} alfa ({compr_txt})')


"""
Задание-2.
Исследовалось влияние препарата на уровень давления пациентов. 
Сначала измерялось давление до приема препарата, потом через 10 минут и через 30 минут. 
Есть ли статистически значимые различия?
1е измерение до приема препарата: 150, 160, 165, 145, 155
2е измерение через 10 минут: 140, 155, 150,  130, 135
3е измерение через 30 минут: 130, 130, 120, 130, 125
"""
# Пояснение:
# 1. Не соблюдается условие нормальности - для расчета используем непараметрические критерии
# 2. Имеем дело с множественными сравнениями в рамках выполнения анализа повторных измерений
#    (в исследовании участвуют одни и те же пациенты)
#    Для расчета в соответствии с условиями воспользуемся критерием Фридмана
#
# Пациент	1-е измерение     2-е измерение     3-е измерение
# 	        значение    ранг  значение    ранг	значение    ранг
# 1	        150	        3	  140	      2	    130	        1
# 2	        160	        3	  155	      2	    130	        1
# 3	        165	        3	  150	      2	    120	        1
# 4	        145	        3	  130	      1.5   130	        1.5
# 5	        155	        3	  135	      2	    125	        1
# 		              ∑ = 15		    ∑ = 9.5		      ∑ = 5.5
#
# Найдем средний ранг R = n * (k+1)/2 = 5 * (3+1)/2 = 10, где n-объем выборки = 5, k-число сравниваемых групп = 3
#
# Критерий Фридмана (расчет): χ_r^2 = 12 / (n*k*(k+1)) * ∑(R_i - R)^2 =
#                                     12 / (5*3*(3+1)) * [(15 - 10)^2 + (9.5 - 10)^2 + (5.5 - 10)^2] = 9.1

# Для анализа возьмем значение α = 0,05 (по умолчанию)
# Собственно расчет выполним используя функцию friedmanchisquare() библиотеки stats:

measure_1 = np.array([150, 160, 165, 145, 155])
measure_2 = np.array([140, 155, 150,  130, 135])
measure_3 = np.array([130, 130, 120, 130, 125])

hyp_0 = 'Не имеют статистически значимых различий'
hyp_1 = 'Имеют выраженные статистически значимые различия (препарат работает)'
alfa = 0.05                                       # α = 0,05 (по умолчанию)

st, p_value = stats.friedmanchisquare(measure_1, measure_2, measure_3)
h0_true = p_value > alfa
p_val = round(p_value, 3)
compr_txt = f'{p_val} > {alfa}' if h0_true else f'{p_val} <= {alfa}'

# вывод результатов проверки
print()
print('Задание-2.')
print('--------------------------------')
print(f'Результаты исследования: '
      f'\n- 1е измерение до приема препарата: {measure_1}'
      f'\n- измерение через 10 минут: {measure_2}'
      f'\n- измерение через 30 минут: {measure_3}'
      )
print(f'statistic = {st}; p_value = {p_val}')
print(f'{hyp_0 if h0_true else hyp_1}:')
print(f'т.к. p_value {">" if h0_true else "<="} alfa ({compr_txt})')


"""
Задание-3.
Сравните 1 и 2-е измерения из Задания-2, предполагая, что 3го измерения через 30 минут не было.
"""
# Пояснение:
# 1. Не соблюдается условие нормальности - для расчета используем непараметрические критерии
# 2. Имеем дело со сравнением 2-х зависимых выборок в рамках выполнения анализа после принятия препарата
#    (в исследовании участвуют одни и те же пациенты)
#    Для расчета в соответствии с условиями воспользуемся критерием Уилкоксона
#
#  3. Находим разницу между показаниями до и после приема препарата measure_2 - measure_1
measure_1 = np.array([150, 160, 165, 145, 155])
measure_2 = np.array([140, 155, 150,  130, 135])
measure_delta = measure_2 - measure_1

# 4. Судя по содержимому выборок, у нас нет не свойственных значений (все разности < 0)
# Чтобы найти расчетный критерий Уилкоксона, нам необходимо сложить ранги
# несвойственных значений для массива measure_2 - measure_1.
# Но их нет. Ожидаемо в этом случае критерий Уилкоксона будет равен 0!
# Проверим наши предположения функцией из Python:
hyp_0 = 'Не имеют статистически значимых различий'
hyp_1 = 'Имеют статистически значимые различия (препарат работает)'
alfa = 0.05                                           # α = 0,05 (по умолчанию)
st, p_value = stats.wilcoxon(measure_1, measure_2, alternative='two-sided')

h0_true = p_value > alfa
p_val = round(p_value, 3)
compr_txt = f'{p_val} > {alfa}' if h0_true else f'{p_val} <= {alfa}'

# вывод результатов проверки
print()
print('Задание-3.')
print('--------------------------------')
print(f'Показания по результатам измерения до и после применения препарата от давления: '
      f'\n- X1 = {measure_1} '
      f'\n- Y1 = {measure_2}')
print(f'statistic = {st}; p_value = {p_val}')
print(f'{hyp_0 if h0_true else hyp_1}:')
print(f'т.к. p_value {">" if h0_true else "<="} alfa ({compr_txt})')


"""
Задание-4.
Даны 3 группы учеников плавания.
В 1 группе время на дистанцию 50 м составляют:
                  56, 60, 62, 55, 71, 67, 59, 58, 64, 67
Вторая группа :   57, 58, 69, 48, 72, 70, 68, 71, 50, 53
Третья группа:    57, 67, 49, 48, 47, 55, 66, 51, 54
"""
# Пояснение:
# Не соблюдается условие нормальности - для расчета используем непараметрические критерии.
# Имеем дело с множественными сравнениями в рамках независимых выборок
#    (в соревновании по плаванию участвуют з-и группы с разными учениками)
#    Для расчета в соответствии с условиями воспользуемся критерием Крускала - Уоллиса
#
# Порядок расчеты:
# 	1) Обобщим все данные в один ряд
# 	2) Присвоим ранги в этом ряду
# 	3) Посчитаем сумму рангов, присвоенных в общем ряду, но теперь уже в отдельных группах.
#      Т.е. получим сумму рангов для каждой отдельной группы.
# 	   Воспользуемся формулой:
#      H = 12 / (N*(N+1)) * (∑ (i = 1...k_j) T_j^2 / n_j) - 3*(N+1),
#      где N – общее число измерений во всех сравниваемых выборках,
#      k_j - объем j-ой выборки
#      T_j - сумма рангов в каждой выборке.

# Выполним собственно расчет воспользовавшись функцией kruskal() в Python
gr_1 = np.array([56, 60, 62, 55, 71, 67, 59, 58, 64, 67])
gr_2 = np.array([57, 58, 69, 48, 72, 70, 68, 71, 50, 53])
gr_3 = np.array([57, 67, 49, 48, 47, 55, 66, 51, 54])

hyp_0 = 'Не имеют статистически значимых различий'
hyp_1 = 'Имеют статистически значимые различия (в среднем выступили по разному)'
alfa = 0.05                                       # α = 0,05 (по умолчанию)

st, p_value = stats.kruskal(gr_1, gr_2, gr_3)
h0_true = p_value > alfa
p_val = round(p_value, 3)
compr_txt = f'{p_val} > {alfa}' if h0_true else f'{p_val} <= {alfa}'

# вывод результатов проверки
print()
print('Задание-4.')
print('--------------------------------')
print(f'Результаты заплыва в 3-х группах учеников: '
      f'\n- 1я группа: {gr_1}'
      f'\n- 2я группа: {gr_2}'
      f'\n- 3я группа: {gr_3}'
      )
print(f'statistic = {st}; p_value = {p_val}')
print(f'{hyp_0 if h0_true else hyp_1}:')
print(f'т.к. p_value {">" if h0_true else "<="} alfa ({compr_txt})')


"""
Задание-5.
Заявляется, что партия изготавливается со средним арифметическим 2,5 см. 
Проверить данную гипотезу, если известно, что размеры изделий подчинены нормальному закону распределения. 
Объем выборки 10, уровень статистической значимости 5%
2.51, 2.35, 2.74, 2.56, 2.40, 2.36, 2.65, 2.7, 2.67, 2.34
"""
# Пояснение:
# Значения в выборке по условию задачи подчинены нормальному закону распределения.
# Данные генеральной совокупности не известны, поэтому для расчета воспользуемся критерием Стьюдента

# Исходные данные:
m_0 = 2.5               # см.
alfa = 0.05             # %
n = 10                  # объем выборки
a_sample = np.array([2.51, 2.35, 2.74, 2.56, 2.40, 2.36, 2.65, 2.7, 2.67, 2.34])

# Расчет (вручную)
m_sample = np.mean(a_sample)
s_sample = np.std(a_sample, ddof=1)
d_sample = np.var(a_sample, ddof=1)             # s_sample**2 = d_sample
t = (m_sample - m_0) / np.sqrt(d_sample/n)      # Определяем критерий Стьюдента, т.к. нет данных ген. совокупности
z_alfa_r = stats.t.ppf(alfa, (n-1))             # квантиль для правостороннего тестирования
z_alfa_l = stats.t.ppf(1-alfa, (n-1))           # квантиль для левостороннего тестирования

print()
print('Задание-5.')
print('--------------------------------')
print(f'Среднее по выборке из {n} замеров изделия: Mean = {m_sample}')
print(f'Среднеквадратичное отклонение и Дисперсия по выборке из {n} замеров: '
      f'sigma, D (sigma^2) = {s_sample, d_sample}')
print(f'Критерий Стьюдента - t = {t}')

print(f'Граница доверительной вероятности в числах сигм для критерия α = {round(alfa, 4)}:\n'
      f'- левосторонняя z_a_left = {z_alfa_l}\n'
      f'- правосторонняя z_a_right = {z_alfa_r}')

in_fiducia = (z_alfa_r < t if t > 0 else z_alfa_l > t)

print(f'Утверждение заявителя, что партия изготавливается со средним арифметическим 2,5 см. '
      f'{"ВЕРНО (z_alfa_r < t < z_alfa_l)" if in_fiducia else "НЕ верно "}')


exit()
